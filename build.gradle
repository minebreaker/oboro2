plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
    id 'jacoco'
}

group 'org.example'
version '0.3.0'

repositories {
    mavenCentral()
    maven {
        url = "https://maven.pkg.github.com/minebreaker/Izvestia"
        credentials {
            username = project.hasProperty("GITHUB_USER") ? GITHUB_USER : ''
            password = project.hasProperty("GITHUB_TOKEN") ? GITHUB_TOKEN : ''
        }
    }
}

dependencies {
    implementation(
            'com.google.guava:guava:31.1-jre',
//            'com.google.code.findbugs:jsr305:3.0.2',
            'com.google.code.gson:gson:2.9.0',
//            'com.google.http-client:google-http-client:1.39.2',
//            'com.google.mug:mug:5.4',
//            'com.typesafe:config:1.4.1',
            'commons-cli:commons-cli:1.5.0',
//            'org.slf4j:slf4j-api:1.7.32',
//            'org.slf4j:jul-to-slf4j:1.7.32', // Guava uses java.util.logging
//            'ch.qos.logback:logback-classic:1.2.7'
    )
//    apiOnly 'org.projectlombok:lombok:1.18.20'
    testImplementation(
            'org.junit.jupiter:junit-jupiter-api:5.8.2',
            'com.google.truth:truth:1.1.3',
            'com.google.truth.extensions:truth-java8-extension:1.1.3',
            'org.mockito:mockito-core:4.3.1',
            'rip.deadcode:izvestia:0.4.0',
            'com.google.jimfs:jimfs:1.2'
    )
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

test {
    useJUnitPlatform()
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "17"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "17"
}

jar {
    manifest {
        attributes(
                'Main-Class': 'rip.deadcode.oboro.MainKt'
        )
    }

    // Fat jar
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
}

task buildImage(type: Exec, dependsOn: jar) {
    def os = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem
    def jar = jar.archiveFileName.get()
    if (os.isLinux()) {
        commandLine "./script/build-image.sh", jar
    } else if (os.isWindows()) {
        commandLine "script/build-image.cmd", jar
    } else {
        throw new RuntimeException("Unsupported operating system: ${os}")
    }
}
assemble.dependsOn(buildImage)

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}
